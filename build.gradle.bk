buildscript {
    ext {
        dokka_version = '0.9.18'
        junitVersion = '5.1.1'
        junit_jupiter_version = '5.3.1' // TODO
        kotlin_version = '1.2.71'
        kotlintest_version = '3.1.10'
        kotlinpoet_version = '1.4.1'
    }

    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
    }
    dependencies {
        // kotlin plugins
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokka_version"
        // release to Maven Central through Sonatype OSSRH
        // without the need to use Nexus GUI
        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.12.0"
    }
}

plugins {
    id "com.github.hierynomus.license" version "0.14.0"
}
apply plugin: 'kotlin'
apply plugin: 'io.codearte.nexus-staging'
apply plugin: 'license'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'org.jetbrains.dokka'

group 'com.github.manosbatsis.kotlinpoet.utils'
version '1.0-SNAPSHOT'

repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    testImplementation("org.jetbrains.kotlin:kotlin-test:$kotlin_version")
    testImplementation "org.junit.jupiter:junit-jupiter-params:$junitVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"

    testRuntimeOnly "org.junit.vintage:junit-vintage-engine:$junitVersion"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
}

configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        def requested = details.requested
        if (requested.group == 'org.jetbrains.kotlin' && requested.name == 'kotlin-reflect') {
            details.useVersion kotlin_version
        }
    }
}

nexusStaging {
    packageGroup = 'com.github.manosbatsis.vaultaire'
    stagingProfileId = 'com.github.manosbatsis'
}
license {
    header rootProject.file("${rootProject.rootDir}/etc/license/header.txt")
    includes(["src/**/*.java", "src/**/*.kt"])
    excludes(["build/**/*.kt"])
    mapping {
        kt='SLASHSTAR_STYLE'
    }
    strictCheck true
}

dokka {
    outputFormat = 'javadoc'
    outputDirectory = javadoc.destinationDir
    linkMapping {
        dir = "src/main/kotlin"
        url = "https://github.com/manosbatsis/vaultaire/tree/master/${project.name}/src/main/kotlin/"
        suffix = "#L"
    }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        languageVersion = "1.2"
        apiVersion = "1.2"
        jvmTarget = "1.8"
        freeCompilerArgs = ["-Xjsr305=strict"]
        javaParameters = true   // Useful for reflection.
    }
}

tasks.withType(org.jetbrains.dokka.gradle.DokkaTask) {
    skipDeprecated = true
    // Disable linking to online JDK documentation
    noJdkLink = true
    noStdlibLink=true
}

test {
    useJUnitPlatform {
        includeEngines 'junit-jupiter'
        testLogging {
            events "passed", "skipped", "failed", "standardOut", "standardError"
        }
        exclude '**/*IntegrationTest.class'
    }
}
// Run integration tests using junit5
task integrationTest(type: Test) {
    useJUnitPlatform {
        includeEngines 'junit-jupiter'
        testLogging {
            events "passed", "skipped", "failed", "standardOut", "standardError"
        }
        include '**/*IntegrationTest.class'

    }
}

// convenient report on all dependencies
task allDeps(type: DependencyReportTask) {}

task dokkaForGhPages(type: org.jetbrains.dokka.gradle.DokkaTask) {
    outputDirectory = "$rootDir/docs/0.x"
    outputFormat = "gfm"
    inputs.dir 'src/main/kotlin'

}

task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
    outputFormat = 'javadoc'
    outputDirectory = javadoc.destinationDir
    inputs.dir 'src/main/kotlin'
}
task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
task sourcesJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

artifacts { archives jar, sourcesJar, javadocJar }
// Conditional signature of artifacts
if (project.findProperty('signing.password') != '<YOUR-PASSWORD>') {
    signing {
        sign configurations.archives
    }
}

// Upload the archives
uploadArchives {
    repositories {
        mavenDeployer {
            // Sign POMs
            beforeDeployment { deployment ->
                signing.signPom(deployment)
            }
            // Release and Snapshot repos
            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }
            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }
            // Add required metadata to POM
            pom {
                project {
                    name project.name
                    packaging project.name == rootProject.name ? 'pom' : 'jar'
                    description 'Vaultaire: Generate Corda vault helpers and query DSL for your contract states'
                    url 'https://manosbatsis.github.io/vaultaire/'
                    scm {
                        connection 'scm:git:git://github.com/manosbatsis/vaultaire.git'
                        developerConnection 'scm:git:ssh://github.com/manosbatsis/vaultaire.git'
                        url 'http://github.com/manosbatsis/vaultaire/tree/master'
                    }
                    licenses {
                        license {
                            name 'GNU Lesser General Public License, Version 3'
                            url 'https://www.gnu.org/licenses/lgpl-3.0.txt'
                        }
                    }
                    developers {
                        developer {
                            id 'manosbatsis'
                            name 'Manos Batsis'
                            email 'manosbatsis@gmail.com'
                        }
                    }
                }
            }
        }
    }
}